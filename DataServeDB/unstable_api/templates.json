{"Id":"370663761","Name":"test.rre","Description":"this report is made to check this feature","Data":{"Design":"xdd@fsdf\r\nddf'gbh\r\n@test1()\r\n@getUnknownData() ","Script":"function isDateBoolean(obj: any): boolean {\r\n    return typeof obj === 'object' \u0026\u0026 'toISOString' in obj;\r\n}\r\n\r\nfunction isDateCast(obj: any): obj is Date {\r\n    return typeof obj === 'object' \u0026\u0026 'toISOString' in obj;\r\n}\r\n\r\nfunction getUnknownData(): any {\r\n    return new Date();\r\n}\r\n\r\nfunction test1():any {\r\n    var d = getUnknownData();\r\n    if (isDateBoolean(d)) {\r\n        console.log(d.toISOString());\r\n        console.log(d.toIsoString());\r\n    }\r\n    return '23';\r\n}\r\n\r\nfunction test2() {\r\n    var d = getUnknownData();\r\n    if (isDateCast(d)) {\r\n        console.log(d.toISOString());\r\n        console.log(d.toISOString());\r\n    }\r\n}      \r\nvar tst: any;"},"Created":"2019-12-24T10:43:47.121Z","Modified":"2019-12-25T11:47:29.690Z"}
{"Id":"770455218","Name":"Test Report","Description":"this report is made to check this feature","Data":{"Design":"# Basic Income Statement For All Properties\r\n\r\n| Description       | Amount (AED)      |\r\n|:-------------     | ------------:     |\r\n| Income            | @TotalIncome()    |\r\n| Expense           | @TotalExpenses()  |\r\n| **Net Income**    | **@TotalNetIncome()**    |\r\n|\r\n\r\n\u003e **_NOTE:_** Example figures, change to @TotalIncome(), @TotalExpenses(), and @TotalNetIncome() for the figures and delete this note.\r\n\r\n\u003e **_TODO:_** Escaping for @. Use @@ to render @ \r\n","Script":"declare let db: any;\r\nfunction TotalIncome() {\r\n    return db.report.NetIncome(db.properties.getProperties());\r\n}\r\nfunction TotalExpenses() {\r\n    return db.report.NetExpense(db.properties.getProperties());\r\n}\r\nfunction TotalNetIncome() {\r\n    return TotalIncome() - TotalExpenses();\r\n} \r\nfunction NetIncome(Items: any): any {\r\n    if (Items === null) {\r\n        console.log('here net income')\r\n        return;\r\n    }\r\n    let Income: number = 0;\r\n    Items.map((entry: any) =\u003e {\r\n        if (entry.RentalItems !== null) {\r\n            entry.RentalItems.map((info: any) =\u003e {\r\n                if (info.Id.substr(0, 2) === 'RE') {\r\n                    const tIncom = parseInt(info.Amount, 10);\r\n                    if (!isNaN(tIncom)) {\r\n                        Income = Income + tIncom;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return Income;\r\n}"},"Created":"2019-12-25T10:22:43.926Z","Modified":"2020-01-05T11:42:27.731Z"}
{"Id":"801468833","Name":"Test Report","Description":"this report is made to check this feature","Data":{"Design":"# Basic Income Statement For All Properties\r\n\r\n| Description       | Amount (AED)      |\r\n|:-------------     | ------------:     |\r\n| Income            | @TotalIncome()    |\r\n| Expense           | @TotalExpenses()  |\r\n| **Net Income**    | **@TotalNetIncome()**    |\r\n|\r\n\r\n\u003e **_NOTE:_** Example figures, change to @TotalIncome(), @TotalExpenses(), and @TotalNetIncome() for the figures and delete this note.\r\n\r\n\u003e **_TODO:_** Escaping for @. Use @@ to render @ \r\n\r\n\u003e ** this doc is edited **.           ","Script":"declare let db: any;\r\nfunction TotalIncome() {\r\n    return db.report.NetIncome(db.properties.getProperties());\r\n}\r\nfunction TotalExpenses() {\r\n    return db.report.NetExpense(db.properties.getProperties());\r\n}\r\nfunction TotalNetIncome() {\r\n    return TotalIncome() - TotalExpenses();\r\n} "},"Created":"2019-12-25T10:22:43.926Z","Modified":"2020-01-05T11:08:37.515Z"}
{"Id":"613685076","Name":"test acse","Description":"no need to worry","Data":{"Design":"","Script":"var ID = function () {\r\n  // Math.random should be unique because of its seeding algorithm.\r\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n  // after the decimal.\r\n  return '_' + Math.random().toString(36).substr(2, 9);\r\n};"},"Created":"2019-12-25T13:51:17.276Z","Modified":"2019-12-25T13:51:17.276Z"}
{"Id":"481620980","Name":"New Report","Description":"test report, make templates","Data":{"Design":"# Mini code editor\r\n\r\nA non-trivial sample with basic features of a code editor, like syntax detection and syntax highlight. If also uses the extended FileSystem API that allows a user to select files from the disk so the app can read and write to that file.\r\n\r\n\r\n## APIs\r\n\r\n* [BrowserWindow](https://github.com/atom/electron/blob/master/docs/api/browser-window.md)\r\n* [Menu](https://github.com/atom/electron/blob/master/docs/api/menu.md)\r\n* [MenuItem](https://github.com/atom/electron/blob/master/docs/api/menu-item.md)\r\n* [Clipboard](https://github.com/atom/electron/blob/master/docs/api/clipboard.md)\r\n* [fs module](http://nodejs.org/api/fs.html)\r\n\r\n## Screenshot\r\n\r\n![screenshot](/mini-code-editor/screenshot/screenshot.png)\r\n","Script":"declare let reportBag: any;"},"Created":"2019-12-26T06:51:34.001Z","Modified":"2019-12-26T07:14:49.530Z"}
